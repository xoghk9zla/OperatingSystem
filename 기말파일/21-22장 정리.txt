***운영체제 21장 물리 메모리 크기의 극복 : 메커니즘(ppt 287~)***

TLB미스 발생시
case1) 페이지가 존재하며 유효한 경우.
PFN을 가져와서, 명령어를 재실행.(TLB히트)

case2) 유효한 페이지이지만, 존재하지 않는 경우
(물리메모리 상에 존재하지 않으므로)페이지 폴트 발생 -> 페이지 폴트 핸들러가 실행됨.

case3) 페이지가 유효하지 않은 경우
트랩핸들러에 의해 처리.(프로세스가 종료 될 수 있다.)

***운영체제 22장 물리 메모리 크기의 극복 : 정책(ppt 199~)***

평균 메모리 접근 시간 AMAT

AMAT = Ph * Tm + Pm * Td
(Ph= 캐시 히트 확률, Pm= 캐시 미스 확률, 
Tm= 메모리 접근 비용(시간), Td= 디스크 접근 비용(시간))
(1ns = 0.001ms)


캐시 미스 시 정책에 따른 캐시 상태 변화
-FIFO (ppt 305)
-RANDOM (ppt 307)
-LRU (ppt 310)

캐시 증가에 따른 각 정책의 캐시 적중률
-접근 방식에 지역성이 없는 경우(랜덤) -> ppt 311
-접근 방식에 지역성이 있는 경우(80:20) -> ppt 312
-순차 적인 페이지 참조인 경우 -> ppt 313

메모리 사용 요구가 많고, 프로세스가 요구하는 메모리가 
물리메모리 크기를 넘어섰을 때, 운영체제는 끊임없는 페이징을 하게 되고
이런 현상을 쓰래싱(thrashing)이라고 부른다.

해결 방법 : 다수의 프로세스가 존재할 때, 일부 프로세스를 중지시켜 메모리에 탑재하여 실행.